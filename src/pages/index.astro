---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero';
import Services from '../components/Services';
import Approach from '../components/Approach';
import WorkMethodology from '../components/WorkMethodology';
import EndingCTA from '../components/EndingCTA';
import TechCommandCenterCTA from '../components/TechCommandCenterCTA';

// Structured data exactly as before
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "Buildrs.AI",
  "description": "Premium AI consultancy en development services. Custom AI SaaS, automatisering en strategische AI consultancy.",
  "url": "https://buildrs.ai",
  "logo": "https://buildrs.ai/logo.png",
  "sameAs": [
    "https://linkedin.com/company/buildrs-ai"
  ],
  "contactPoint": {
    "@type": "ContactPoint",
    "telephone": "+31-6-12345678",
    "contactType": "customer service",
    "availableLanguage": "Dutch"
  },
  "address": {
    "@type": "PostalAddress",
    "addressCountry": "NL",
    "addressLocality": "Amsterdam"
  },
  "service": [
    {
      "@type": "Service",
      "name": "AI Automations",
      "description": "Intelligente workflow automatisering met AI"
    },
    {
      "@type": "Service", 
      "name": "Custom AI SaaS",
      "description": "Op maat gemaakte AI software oplossingen"
    },
    {
      "@type": "Service",
      "name": "AI Consultancy",
      "description": "Strategische AI consultancy en implementatie"
    },
    {
      "@type": "Service",
      "name": "Autonomous AI Agents",
      "description": "Zelfstandige AI agents voor bedrijfsprocessen"
    }
  ]
};
---

<Layout 
  title="Buildrs.AI | Premium AI Consultancy & Development"
  description="Premium AI consultancy en development services. Custom AI SaaS, automatisering en strategische AI consultancy. Van idee tot implementatie."
  keywords="AI consultancy, AI development, custom AI SaaS, AI automatisering, machine learning, artificial intelligence, Netherlands"
>
  <!-- Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
  
  <!-- Skip link for accessibility -->
  <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-white text-black px-4 py-2 rounded">
    Skip to main content
  </a>

  <!-- Critical CSS to prevent FOUC and ensure instant hero visibility -->
  <style>
    /* Hide everything below hero until hero is loaded */
    .below-hero {
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease-out;
    }
    
    .hero-loaded .below-hero {
      opacity: 1 !important;
      visibility: visible !important;
    }
    
    /* Fallback - show after 1 second no matter what */
    body .below-hero {
      animation: forceShow 1s ease-out 1s forwards;
    }
    
    @keyframes forceShow {
      to {
        opacity: 1;
        visibility: visible;
      }
    }
    
    /* Ensure page starts with black background */
    body {
      background-color: #000000 !important;
    }
    
    /* Critical hero styles for instant rendering */
    .hero-section {
      position: relative;
      min-height: 90vh;
      background-color: #000000;
      color: #ffffff;
      overflow: hidden;
      display: flex;
      align-items: flex-start;
      justify-content: center;
      padding: 25vh 1rem 3rem;
    }
    
    /* Prevent any layout shift */
    .hero-content {
      position: relative;
      max-width: 80rem;
      width: 100%;
      text-align: center;
      z-index: 30;
    }
  </style>

  <main id="main-content" role="main" class="min-h-screen bg-black">
    <!-- Hero component loads first and immediately -->
    <Hero client:load />
    
    <!-- Other sections hidden until hero is ready -->
    <div class="below-hero">
      <Services client:visible />
      <Approach client:visible />
      <WorkMethodology client:visible />
      <EndingCTA client:visible />
      <TechCommandCenterCTA client:visible />
    </div>
  </main>

  <script>
    // Show other sections after hero is ready
    function showBelowHero() {
      console.log('Showing below-hero sections');
      document.body.classList.add('hero-loaded');
    }
    
    // Multiple fallbacks to ensure it works
    document.addEventListener('DOMContentLoaded', () => {
      // Wait a moment for hero to render
      setTimeout(showBelowHero, 100);
    });
    
    // Backup trigger after page load
    window.addEventListener('load', () => {
      setTimeout(showBelowHero, 50);
    });
    
    // Immediate trigger if DOM is already ready
    if (document.readyState !== 'loading') {
      setTimeout(showBelowHero, 50);
    }
    
    // Force trigger as absolute fallback
    setTimeout(showBelowHero, 500);
  </script>
</Layout>

